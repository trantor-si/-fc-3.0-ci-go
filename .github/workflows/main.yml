name: ci-golang-workflow
on: 
  push:
    branches:
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-application:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      # - run: go test
      # - run: go run math.go

      # 0) Setup do ambiente SonarQube
      - run: go test -coverprofile=coverage.out
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # SONAR_HOST_URL: http://sonarcloud.io

      # - name: SonarCloud Quality Gate
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 1) Setup do ambiente Docker na máquina
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # 2) Permite o build no Docker em diversas arquiteturas
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3) Logar no Dockehub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4) Faz o build da aplicação
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: trantordocker/fc-3.0-ci-go-sonar:latest
